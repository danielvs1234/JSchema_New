/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.jSchema.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.jSchema.ExtendedObject;
import org.xtext.example.mydsl.jSchema.ExtendedProperties;
import org.xtext.example.mydsl.jSchema.Includes;
import org.xtext.example.mydsl.jSchema.JSchemaPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Extended Object</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.jSchema.impl.ExtendedObjectImpl#getExObjectName <em>Ex Object Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.jSchema.impl.ExtendedObjectImpl#getExtendsID <em>Extends ID</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.jSchema.impl.ExtendedObjectImpl#getIncludeObjects <em>Include Objects</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.jSchema.impl.ExtendedObjectImpl#getBody <em>Body</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExtendedObjectImpl extends AbstractObjectImpl implements ExtendedObject
{
  /**
   * The default value of the '{@link #getExObjectName() <em>Ex Object Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExObjectName()
   * @generated
   * @ordered
   */
  protected static final String EX_OBJECT_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExObjectName() <em>Ex Object Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExObjectName()
   * @generated
   * @ordered
   */
  protected String exObjectName = EX_OBJECT_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getExtendsID() <em>Extends ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExtendsID()
   * @generated
   * @ordered
   */
  protected static final String EXTENDS_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExtendsID() <em>Extends ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExtendsID()
   * @generated
   * @ordered
   */
  protected String extendsID = EXTENDS_ID_EDEFAULT;

  /**
   * The cached value of the '{@link #getIncludeObjects() <em>Include Objects</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIncludeObjects()
   * @generated
   * @ordered
   */
  protected Includes includeObjects;

  /**
   * The cached value of the '{@link #getBody() <em>Body</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBody()
   * @generated
   * @ordered
   */
  protected EList<ExtendedProperties> body;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExtendedObjectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JSchemaPackage.Literals.EXTENDED_OBJECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExObjectName()
  {
    return exObjectName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExObjectName(String newExObjectName)
  {
    String oldExObjectName = exObjectName;
    exObjectName = newExObjectName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JSchemaPackage.EXTENDED_OBJECT__EX_OBJECT_NAME, oldExObjectName, exObjectName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExtendsID()
  {
    return extendsID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExtendsID(String newExtendsID)
  {
    String oldExtendsID = extendsID;
    extendsID = newExtendsID;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JSchemaPackage.EXTENDED_OBJECT__EXTENDS_ID, oldExtendsID, extendsID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Includes getIncludeObjects()
  {
    return includeObjects;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIncludeObjects(Includes newIncludeObjects, NotificationChain msgs)
  {
    Includes oldIncludeObjects = includeObjects;
    includeObjects = newIncludeObjects;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JSchemaPackage.EXTENDED_OBJECT__INCLUDE_OBJECTS, oldIncludeObjects, newIncludeObjects);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIncludeObjects(Includes newIncludeObjects)
  {
    if (newIncludeObjects != includeObjects)
    {
      NotificationChain msgs = null;
      if (includeObjects != null)
        msgs = ((InternalEObject)includeObjects).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JSchemaPackage.EXTENDED_OBJECT__INCLUDE_OBJECTS, null, msgs);
      if (newIncludeObjects != null)
        msgs = ((InternalEObject)newIncludeObjects).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JSchemaPackage.EXTENDED_OBJECT__INCLUDE_OBJECTS, null, msgs);
      msgs = basicSetIncludeObjects(newIncludeObjects, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JSchemaPackage.EXTENDED_OBJECT__INCLUDE_OBJECTS, newIncludeObjects, newIncludeObjects));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ExtendedProperties> getBody()
  {
    if (body == null)
    {
      body = new EObjectContainmentEList<ExtendedProperties>(ExtendedProperties.class, this, JSchemaPackage.EXTENDED_OBJECT__BODY);
    }
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JSchemaPackage.EXTENDED_OBJECT__INCLUDE_OBJECTS:
        return basicSetIncludeObjects(null, msgs);
      case JSchemaPackage.EXTENDED_OBJECT__BODY:
        return ((InternalEList<?>)getBody()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JSchemaPackage.EXTENDED_OBJECT__EX_OBJECT_NAME:
        return getExObjectName();
      case JSchemaPackage.EXTENDED_OBJECT__EXTENDS_ID:
        return getExtendsID();
      case JSchemaPackage.EXTENDED_OBJECT__INCLUDE_OBJECTS:
        return getIncludeObjects();
      case JSchemaPackage.EXTENDED_OBJECT__BODY:
        return getBody();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JSchemaPackage.EXTENDED_OBJECT__EX_OBJECT_NAME:
        setExObjectName((String)newValue);
        return;
      case JSchemaPackage.EXTENDED_OBJECT__EXTENDS_ID:
        setExtendsID((String)newValue);
        return;
      case JSchemaPackage.EXTENDED_OBJECT__INCLUDE_OBJECTS:
        setIncludeObjects((Includes)newValue);
        return;
      case JSchemaPackage.EXTENDED_OBJECT__BODY:
        getBody().clear();
        getBody().addAll((Collection<? extends ExtendedProperties>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JSchemaPackage.EXTENDED_OBJECT__EX_OBJECT_NAME:
        setExObjectName(EX_OBJECT_NAME_EDEFAULT);
        return;
      case JSchemaPackage.EXTENDED_OBJECT__EXTENDS_ID:
        setExtendsID(EXTENDS_ID_EDEFAULT);
        return;
      case JSchemaPackage.EXTENDED_OBJECT__INCLUDE_OBJECTS:
        setIncludeObjects((Includes)null);
        return;
      case JSchemaPackage.EXTENDED_OBJECT__BODY:
        getBody().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JSchemaPackage.EXTENDED_OBJECT__EX_OBJECT_NAME:
        return EX_OBJECT_NAME_EDEFAULT == null ? exObjectName != null : !EX_OBJECT_NAME_EDEFAULT.equals(exObjectName);
      case JSchemaPackage.EXTENDED_OBJECT__EXTENDS_ID:
        return EXTENDS_ID_EDEFAULT == null ? extendsID != null : !EXTENDS_ID_EDEFAULT.equals(extendsID);
      case JSchemaPackage.EXTENDED_OBJECT__INCLUDE_OBJECTS:
        return includeObjects != null;
      case JSchemaPackage.EXTENDED_OBJECT__BODY:
        return body != null && !body.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (exObjectName: ");
    result.append(exObjectName);
    result.append(", extendsID: ");
    result.append(extendsID);
    result.append(')');
    return result.toString();
  }

} //ExtendedObjectImpl

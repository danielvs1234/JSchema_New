/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.jSchema.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.jSchema.ExtendedProperties;
import org.xtext.example.mydsl.jSchema.JSchemaPackage;
import org.xtext.example.mydsl.jSchema.hasProperties;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Extended Properties</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.jSchema.impl.ExtendedPropertiesImpl#getOverride <em>Override</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.jSchema.impl.ExtendedPropertiesImpl#getExtendedProperties <em>Extended Properties</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExtendedPropertiesImpl extends MinimalEObjectImpl.Container implements ExtendedProperties
{
  /**
   * The default value of the '{@link #getOverride() <em>Override</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOverride()
   * @generated
   * @ordered
   */
  protected static final String OVERRIDE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOverride() <em>Override</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOverride()
   * @generated
   * @ordered
   */
  protected String override = OVERRIDE_EDEFAULT;

  /**
   * The cached value of the '{@link #getExtendedProperties() <em>Extended Properties</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExtendedProperties()
   * @generated
   * @ordered
   */
  protected hasProperties extendedProperties;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExtendedPropertiesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JSchemaPackage.Literals.EXTENDED_PROPERTIES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOverride()
  {
    return override;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOverride(String newOverride)
  {
    String oldOverride = override;
    override = newOverride;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JSchemaPackage.EXTENDED_PROPERTIES__OVERRIDE, oldOverride, override));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public hasProperties getExtendedProperties()
  {
    return extendedProperties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExtendedProperties(hasProperties newExtendedProperties, NotificationChain msgs)
  {
    hasProperties oldExtendedProperties = extendedProperties;
    extendedProperties = newExtendedProperties;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JSchemaPackage.EXTENDED_PROPERTIES__EXTENDED_PROPERTIES, oldExtendedProperties, newExtendedProperties);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExtendedProperties(hasProperties newExtendedProperties)
  {
    if (newExtendedProperties != extendedProperties)
    {
      NotificationChain msgs = null;
      if (extendedProperties != null)
        msgs = ((InternalEObject)extendedProperties).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JSchemaPackage.EXTENDED_PROPERTIES__EXTENDED_PROPERTIES, null, msgs);
      if (newExtendedProperties != null)
        msgs = ((InternalEObject)newExtendedProperties).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JSchemaPackage.EXTENDED_PROPERTIES__EXTENDED_PROPERTIES, null, msgs);
      msgs = basicSetExtendedProperties(newExtendedProperties, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JSchemaPackage.EXTENDED_PROPERTIES__EXTENDED_PROPERTIES, newExtendedProperties, newExtendedProperties));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JSchemaPackage.EXTENDED_PROPERTIES__EXTENDED_PROPERTIES:
        return basicSetExtendedProperties(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JSchemaPackage.EXTENDED_PROPERTIES__OVERRIDE:
        return getOverride();
      case JSchemaPackage.EXTENDED_PROPERTIES__EXTENDED_PROPERTIES:
        return getExtendedProperties();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JSchemaPackage.EXTENDED_PROPERTIES__OVERRIDE:
        setOverride((String)newValue);
        return;
      case JSchemaPackage.EXTENDED_PROPERTIES__EXTENDED_PROPERTIES:
        setExtendedProperties((hasProperties)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JSchemaPackage.EXTENDED_PROPERTIES__OVERRIDE:
        setOverride(OVERRIDE_EDEFAULT);
        return;
      case JSchemaPackage.EXTENDED_PROPERTIES__EXTENDED_PROPERTIES:
        setExtendedProperties((hasProperties)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JSchemaPackage.EXTENDED_PROPERTIES__OVERRIDE:
        return OVERRIDE_EDEFAULT == null ? override != null : !OVERRIDE_EDEFAULT.equals(override);
      case JSchemaPackage.EXTENDED_PROPERTIES__EXTENDED_PROPERTIES:
        return extendedProperties != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (override: ");
    result.append(override);
    result.append(')');
    return result.toString();
  }

} //ExtendedPropertiesImpl
